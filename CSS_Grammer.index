-----------------CSS 문법------------------
디자인에 집중하는 언어.

CSS는 3가지 방법으로 HTML 문서에 추가할 수 있습니다.
    1. 인라인style - HTML 요소 내부의 속성을 사용하여
    2. 내부 - 섹션 <style>의 요소를 사용하여<head>
    3. 외부 - 요소를 사용하여 <link> 외부 CSS 파일에 링

    --> head 부분에서, 태그를 언급하며 CSS를 구현함.
    --> head는 html의 속성값을 정의하는 부분!
    --> body에서 정의된 태그를 언급해야함.


<style>  안에서 정의 !  </style>
안에서는,
    선택자1,선택자2       { 서술(효과); 서술(효과) }
    selector    description
으로 CSS를 구현.


특정 선택자에만 적용하기
1. 세부 특성 지정
    header h1{
        border: 1px; solid red;
    }
2. id 활용
'#'을 사용하기
    --> body에서 id를 할당하고, head에서 #id{} 안에 적용하기.
3. class 활용
    --> 포괄적으로 다른 특성들도 묶어서 적용가능
    --> head에서, '.클래스이름 {  }'으로 활용됨
3. 모든 특성에 적용
    --> *

구현할 수 있는 서술효과들
    - color:
    - font-size: 
    - text-text-decoration: underline;
    - border: 색깔 픽셀 글꼴(solid dotted)
    - padding(border의 안)): 픽셀
    - margin(border의 밖): 픽셀
    - height(글꼴의 크기): 픽셀
    - width(글꼴의 크기): 픽셀
    - text-align(정렬위치): 위치

글자의 상세 효과들
    <b>- 굵은 글씨 // 별다른 중요성x
    <strong>- 중요한 텍스트 // 검색 엔진에 중요하다는 것을 알리는 기능!
    <i>- 이탤릭체 텍스트 // 기울림꼴
    <em>- 강조된 텍스트 // 기울림꼴
    <mark>- 표시된 텍스트 // 하이라이트 시키기
    <small>- 더 작은 텍스트 // 글자 작게
    <del>- 삭제된 텍스트 // 삭제된 텍스트를 정의(취소선이 그어짐)
    <ins>- 삽입된 텍스트 // 삽입된 텍스트를 의미(밑줄 그어짐)
    <sub>- 아래 첨자 텍스트
    <sup>- 상위 첨자 텍스트
    <blockquote cite="url입력"> 인용문을 입력 </blockquote> // 안의 인용문은 들여쓰기됨.
    <q> </q> : 짧은 인용문

- 배경화면
    background-color
    background-image
    background-repeat : no-repeat or repeat-x or repeat-y
    background-attachment : 배경 이미지를 스크롤해야 하는지(scroll) 아닌지(fixed)

background { 약어 사용 시, 순서}
    (1)background-color
    (2)background-image
    (3)background-position
    (4)background-size
    (5)background-repeat
    (6)background-origin
    (7)background-clip
    (8)background-attachment

-텍스트 
    tex-align: justify;
    = 모든 줄의 너비를 맞춤(신문처럼)
    글꼴
    -family는 항상 대체 글꼴도 추가해야 함.
    p {
    font-family: Tahoma, Verdana, sans-serif;
    }
    -font-style : 기울기
    -font-weight : 두께
    -font-size : 크기(px or vw)
    vw = 창의 크기에 따라 비율 반영하여 크기를 조정


-경게선 border
    border-style : 경계선 모양
    border-width : 경계선 폭 (상하 좌우 or 상 우 하 좌)
    border 약어 : style width color
    border 없애기 : border-collapse : collapse;

-여백 margin
    margin 약어 : 위 좌우 아래 or 위아래 양사이드
    margin: auto(블럭을 중앙 정렬) <-> (text 정렬 = text-align = center)
    margin: inherit( 그 위에 적용된 속성의 margin값을 이어받음)
    margin collapse(margin사이가 너무 멀면, 브라우저에서 무시함)

-box-sizing = border와 padding으로 인해 달라지는 박스의 크기를 설정
    기존 컨텐츠의 크기 = width
    전체 박스의 크기 = margin + width
    박스 사이징 = border-boxing(패딩 크기와 상관없이 width가 박스의 크기가 되도록)

-max-width : 최대 허용 너비를 설정 & 페이지가 작아질 때, 동적으로 박스모양을 보이도록 설정!

-가상 클래스
    : 로 표시
-가상 엘리먼트(요소/텍스트/내용)
    :: 로 표시
    marker 등등으로 활용가능 
    :: selection{} // 마우스로 선택을 하면 효과 표시

-보이는 모양(형식적 구조 설정) --> 레이아웃 형성 가능
display
    : none // 표시 x
    : inline // width, height가 안 먹힘
    : block // 블럭 & 각각이 한 줄을 다 차지
    : inline-block // 블럭 & 한 줄에 여러개의 블럭 존재 가능
    : flex
    : grid

속성으로 태그 중 일부를 선택
    [target]이 들어가 있는 태그만을 지정 // 해당 target은 속성안에 있는 값들만 선택
    a[target] {
         background-color: yellow;
    }
    [target = ""] ""안의 텍스트를 포함하는 모든 속성 태그만을 지정
    [target!~=""] ""안의 텍스트와 정확히 일치하는 속성 태그만을 지정
    [target^=""] ""안의 텍스트로 시작하는 것들 지정
    [target$=""] ""안의 텍스트로 끝나는 것들 지정 

-위치
    position
        : static(default) // 위치 고정이지만, 화면 줄이면 모양 변형 <-- top left 등 무시
        : relative (화면 줄여도 모양 변형)
        : fixed // 위치 고정 & 화면 줄이면 짤림 = 화면을 기준으로 배치됨.
        : absolute // body를 기준으로 배치됨 = 문서의 일반 흐름에서 빠져버려서, 다른 요소들이 그 자리를 차지함(배경 가능)
        --> absolute는 위치 지정x = 문서기준 & 위치 지정o = 상단의 형식 기준
    z-index
        = 겹쳐지는 위치에서 어느 것이 위로 올 것인가?
        : z-index: 숫자가 클수록 위에 위치(마이너스 가능)
    overflow
        = 영역에 맞지 않을 만큼 큰 콘텐츠를 처리
        : visible(default)
        : hidden(넘친 부분 잘림)
        : scroll(자동 추가)
        : auto(필요한 경우 scroll 추가)
    float
        = 떠다니다(병렬 배치 // 아이템들끼리 유연하게 배치)
        : right
        : left
        : none
        : inherit
    clear
        = 해당 자리에 온 것을 무시 --> 그 다음 줄에 배치
        : left
        : right
    clearfix
        = 밖으로 넘친 부분을 조작
        ::after{} // 넘친 부분을 조작 // 해당 형식은 container에 배치되어야 함.
        ::before{} // 어떤 요소 앞에 조작

결합자(상속)
    = 특정 형식 아래에 있는 모든 형식을 관리.
    -부모 자식 {그다음 자식까지만을 관리}
    -부모 > 바로다음자식 {바로 다음 자식까지 관리}
    -형제 결합자 // 형제 + 형제{그다음 형제까지 적용}
    -후속 결합자 // div ~ p{그 뒤의 모든 형제를 관리}



div박스 기준으로!
    (1) content 범위: width * height
    (2) border 범위: border 두께
    (3) padding 범위: 좌우상하
    --> 박스의 전체 가로: width + left padding + right padding + left border + right border
    --> 박스의 전체 세로: height + top padding + bottom padding + top border + bottom border

outline = 다른 콘텐츠와 곂칠 수도 있는, 박스모델에 포함되지 않는 그냥 선
outline-offset : px; 얼만큼 border로부터 떨어져있어야 할지

-링크
    a태그는 항상 밑줄이 그어짐 --> 지우려면
    a {
    text-decoration: none;
    }
이펙트
-링크
    a:link{}- 방문하지 않은 일반 링크
    a:visited{}- 사용자가 방문한 링크
    a:hover{}- 사용자가 마우스를 올려놓으면 링크가 표시됩니다.
    a:active{}- 클릭하는 순간의 링크
-드롭다운
    dropdown = 목차 카테고리
    dropdown-content = 내려오는 내용들(원래는 display :none으로 설정해야 함(
    EX)
    .dropdown:hover .dropdown-content {
         display: block;
    }

Flex box
    -Flex container = 부모 컨테이너
    -Flext item = 담길 아이템
    -->예시
    <div class="flex-container">
        <div>1</div>
        <div>2</div>
        <div>3</div>  
    </div>

    -flex-direction = 기존보다, 훨씬 유연하게 float을 유지시킬 수 있음
        row:
        column: 
        reverse:
    -flex-wrap: 웹 사이즈 줄여도, 축소시킬지 or 다음줄로 이동시킬 지
        :nowrap(축소)
        :wrap(다음줄로 이동)

    -justify-content = 수평을 기준으로, 정렬 방향(주축 = 수평)
        : center(중앙)
        : flex-start(default // 왼쪽)
        : flex-end(오른쪽)
        : space-around(각 항목의 양 옆의 공백을 일치 = 맨 끝의 공백이 비교적 적음)
        : space-between(주변 공백 + 끝 공백x)
        : space-evenly(각 항목 간의 공백을 일치 = 모든 공백이 동일함)
    -align-items = 수직을 기준으로, 정렬 방향(주축 = 수직) // 수직의 모든 높이를 사용하지 않을 때!!
        : center(중앙)
        : flex-start(상단)
        : flex-end(하단)
        : stretch(수직을 모두 채움)
        : baseline(수평 기준선을 기준으로 정렬)
    -align-content = 플렉스 항목 대신, 플렉스 라인을 정렬

    반응형(기기별 디스플레이 크기 고려)
        -flex-direction을 픽셀에 따라 변경 + 디스플레이 설정
    --> 예시
    @media (max-width: 800px) {
        .column {
            flex: 50%;
            max-width: 50%;
        }
    }
    